<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="net.okjsp.community.dao.CommunityDao">

    <!-- 게시물 기본 resultMap -->
	<resultMap id="articleBaseMap" type="net.okjsp.community.model.Article">
        <id jdbcType="INTEGER" property="writeNo" column="write_no"/>
        <result jdbcType="INTEGER" property="boardId" column="board_id"/>
        <result jdbcType="INTEGER" property="categoryId" column="category_id"/>
        <result jdbcType="BIT" property="enabled" column="enabled"/>
        <result jdbcType="VARCHAR" property="title" column="title"/>
        <result jdbcType="BIT" property="anonymized" column="anonymized"/>
        <result jdbcType="VARCHAR" property="anonymousNickname" column="anonymous_nickname"/>
        <result jdbcType="INTEGER" property="postingHit" column="posting_hit"/>
        <result jdbcType="TIMESTAMP" property="writeDate" column="write_date"/>
        <result jdbcType="TIMESTAMP" property="updateDate" column="update_date"/>
        <result jdbcType="INTEGER" property="userId" column="user_id" />

        <association property="user" javaType="net.okjsp.user.model.User"
                     resultMap="net.okjsp.user.dao.UserDao.userProfileMap" />
    </resultMap>

    <!-- 목록 resultMap -->
    <resultMap id="articlesMap" type="net.okjsp.community.model.Article" extends="articleBaseMap">
        <association property="commentCount" javaType="java.lang.Integer" column="{boardId=board_id, writeNo=write_no}"
                 select="net.okjsp.community.dao.CommentDao.selectTotalCount" />
    </resultMap>

    <!-- 상세내용 resultMap -->
    <resultMap id="articleMap" type="net.okjsp.community.model.Article" extends="articleBaseMap">
        <result property="content" column="content"/>

        <collection property="comments" javaType="java.util.List"
                    column="{boardId=board_id, writeNo=write_no}"
                    select="net.okjsp.community.dao.CommentDao.selectListForArticle" />
    </resultMap>
    
    <!-- 각 게시판의 게시글 목록을 가져온다. -->
    <select id="selectAticles" resultMap="articlesMap">
        select
        	a.write_no, a.board_id, a.category_id, a.enabled, a.title, a.anonymized, a.anonymous_nickname,
        	a.posting_hit, a.write_date, a.update_date,
            u.user_id, u.nick_name, u.profile_img, u.grade
        from
            13_t_article a
            left outer join 13_t_user u
            on a.user_id = u.user_id
        where
			a.board_id = #{boardId}
            and a.category_id = #{categoryId}
			and a.enabled = b'1'
        order by
            a.write_no desc
        limit
            #{offset}, #{sizePerList}
    </select>
    
    <!-- 한개의 게시글을 가져온다 -->
    <select id="selectArticle" resultMap="articleMap">
        select
        	a.write_no, a.board_id, a.category_id, a.enabled, a.user_id, a.title, a.anonymized, a.anonymous_nickname,
        	a.content, a.posting_hit, a.write_date, a.update_date,
            u.user_id, u.nick_name, u.profile_img, u.grade
        from
            13_t_article a
            left outer join 13_t_user u
            on a.user_id = u.user_id
        where
			a.write_no = #{writeNo}
			and a.enabled = b'1'
    </select>
    
    
    <select id="selectTotalCount" resultType="java.lang.Integer">
        select
            count(write_no)
        from
            13_t_article
        where
        	board_id = #{boardId}
            and category_id = #{categoryId}
			and enabled = b'1'
    </select>

    <select id="selectUserId" resultType="java.lang.Integer">
        select
        	user_id
        from
            13_t_article a
        where
			write_no = #{writeNo}
			and enabled = b'1'
    </select>

    <insert id="insertArticle" useGeneratedKeys="true" keyProperty="write_no">
        insert into 13_t_article
            (board_id, category_id, enabled, user_id, title, anonymized, anonymous_nickname, content, posting_hit, write_date, update_date)
        values
            (#{boardId}, #{categoryId}, b'1', #{userId}, #{title}, #{anonymized}, #{anonymousNickname}, #{content}, #{postingHit}, now(), now())
    </insert>
    
    <update id="updateArticle">
        update 13_t_article
        set
            title = #{title}, content = #{content}, update_date = now()
        where
            write_no = #{writeNo}
    </update>

    <delete id="deleteArticle">
        delete from 13_t_article where write_no = #{writeNo}
    </delete>

    <update id="addArticleHit">
        update 13_t_article
        set
            posting_hit = posting_hit+1
        where
            write_no = #{writeNo}
    </update>
</mapper>